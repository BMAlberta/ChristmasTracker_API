openapi: 3.0.3
info:
  version: 1.0.0
  title: Christmas Tracker API
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
servers:
  - url: https://api.bmalberta.com/tracker/
tags:
  - name: Auth
    description: APIs used for managing a user's session (login, logoff, and password reset).
  - name: Lists
    description: Operations on Lists
  - name: Enrollment
    description: Creating an account
  - name: Stats
    description: View purchase statistics
  - name: User
    description: Manage user settings
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Obtain a session
      description: Logs a user in 
      requestBody:
        description: Username and password for the user requesting to log in.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Successful login - userId is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logoff
      description: Terminates a user's session. 
        This is no response API - there is no return value.
      responses:
        '200':
          description: Successful logoff.        
  /auth/password/update:
    post:
      tags:
        - Auth
      summary: Password update.
      description: Updates the user's password.
      requestBody:
        description: Both new and old passwords are required. UserId and other
          identifying attributes are retrieved from the headers.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Successfully updated password - userId is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user details.
      description: Gets the details of a user.
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Details of a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
  /users/:
    patch:
      tags:
        - User
      summary: Update user details.
      description: Updates the details of a user.
      requestBody:
        description: User info to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdates'
        required: true
      responses:
        '200':
          description: Details of a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
  /stats/purchases/:
    patch:
      tags:
        - Stats
      summary: Purchase Details.
      description: Calculates purchase details for the given year by list.
      responses:
        '200':
          description: Details of a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseStat'
  /lists/owned/:
    post:
      tags:
        - Lists
      summary: Returns owned lists.
      description: Provides an overview of all lists owned by the logged in user.
      responses:
        '200':
          description: Overview of owned lists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCoreOverview'
  /lists/{listId}/:
    get:
      tags:
        - Lists
      summary: Get list info by ID.
      description: Returns the details of the specified list.
      parameters:
        - name: listId
          in: path
          description: ID of list
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/DefaultListDetail'
  /lists/owner/{ownerId}:
    post:
      tags:
        - Lists
      summary: Purchase an item.
      description: Purchase an item from a list.
      parameters:
        - name: ownerId
          in: path
          description: ID of owner
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Overviews of the lists owned by the supplied owner.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListCoreOverview' 
  /lists/create:
    post:
      tags:
        - Lists
      summary: Creates a new list.
      description: Creates a new list based on the supplied details.
      requestBody:
        description: List information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCreationRequest'
        required: true
      responses:
        '200':
          description: Overview of new list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCoreOverview'

  /lists/{listId}:
    patch:
      tags:
        - Lists
      summary: Update the name of a list.
      description: Updates the name of a list owned by the requester.
      parameters:
        - name: listId
          in: path
          description: ID of list
          required: true
          schema:
            type: string
      requestBody:
        description: New list information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCreationRequest'
        required: true
      responses:
        '200':
          description: Details of a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCoreOverview'
    delete:
      tags:
        - Lists
      summary: Purchase an item.
      description: Purchase an item from a list.
      parameters:
        - name: listId
          in: path
          description: ID of list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Success"


  /lists/details/overviews:
    get:
      tags:
        - Lists
      summary: Get list overviews.
      description: Provides a list of overviews for all lists of which the requester is a member.
      responses:
        '200':
          description: List overviews.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCoreOverview'

  /lists/details/addItem:
    delete:
      tags:
        - Lists
      summary: Purchase an item.
      description: Purchase an item from a list.
      parameters:
        - name: listId
          in: path
          description: ID of list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Success"

  /lists/details/addOffListItem:
    delete:
      tags:
        - Lists
      summary: Purchase an item.
      description: Purchase an item from a list.
      parameters:
        - name: listId
          in: path
          description: ID of list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Success"
  /lists/details/update:
    delete:
      tags:
        - Lists
      summary: Purchase an item.
      description: Purchase an item from a list.
      parameters:
        - name: listId
          in: path
          description: ID of list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Success"
  /lists/details/{id}:
    delete:
      tags:
        - Lists
      summary: Purchase an item.
      description: Purchase an item from a list.
      parameters:
        - name: listId
          in: path
          description: ID of list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Success"
  

  /lists/purchase/:
    post:
      tags:
        - Lists
      summary: Purchase an item.
      description: Purchase an item from a list.
      requestBody:
        description: Purchase information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
        required: true
      responses:
        '200':
          description: Details of a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDetail'
  /lists/purchase/retract:
    post:
      tags:
        - Lists
      summary: Retract purchase.
      description: Retract the purchase of an item.
      requestBody:
        description: Purchase information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
        required: true
      responses:
        '200':
          description: Details of a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDetail'
components:
  parameters:
    Password:
      name: password
      description: User's password.
      required: true
      in: query
      schema:
        type: string
  responses:
    DefaultListDetail:
      description: List details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListDetail'
  schemas:
    LoginBody:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: foo@gmail.com
        password:
          type: string
          format: password
          example: abcd1234
    LoginSuccess: 
      type: object
      properties:
        userInfo:
          type: string
          example: "abc123def456"
    UserDetails:
      type: object
      properties:
        _id:
          type: string
          example: "abc123def456"
        lastLoginLocation:
          type: string
          example: 192.168.1.1
        email:
          type: string
          example: foo@gmail.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        creationDate:
          type: string
          example: "2021-10-06T02:32:42.378Z"
        lastLoginDate:
          type: string
          example: "2024-10-07T18:35:20.599Z"
        lastPasswordChangeDate:
          type: string
          example: "2022-04-19T02:32:27.362Z"
    OwnerDetails:
      type: object
      properties:
        rawId:
          type: string
          example: "abc123def456"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
    UserUpdates:
      type: object
      properties:
        userId:
          type: string
          example: "abc123def456"
        email:
          type: string
          example: foo@gmail.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
    PurchaseStat:
      type: object
      properties:
        totalSpent:
          type: number
          example: 100
        purchasedItems:
          type: number
          example: 2
        listId:
          type: string
          example: "abc123def456"
        listName:
          type: string
          example: "Sample List"
        ownerInfo:
          $ref: '#/components/schemas/OwnerDetails'
    Purchases:
      type: array
      items:
        $ref: '#/components/schemas/PurchaseStat'
    PurchaseRequest:
      type: object
      properties:
        listId:
          type: string
          example: "abc123def456"
        itemId:
          type: string
          example: "123abc456def"
    ItemDetail:
      type: object
      properties:
        _id:
          type: string
          example: "abc123def456"
        name:
          type: string
          example: "Sample List Item"
        description:
          type: string
          example: "Sample item description"
        link:
          type: string
          example: "https://www.apple.com"
        price:
          type: number
          example: 100
        quantity:
          type: number
          example: 1
        createdBy:
          type: string
          example: "123abc456def"
        createdByDate:
          type: string
          example: "2021-10-06T02:32:42.378Z"
        lastEditDate:
          type: string
          example: "2021-10-06T02:32:42.378Z"
        offListIem:
          type: boolean
          example: false
        retractablePurchase:
          type: boolean
          example: false
        purchaseState:
          type: string
          example: "available"
        purchasesAllowed:
          type: boolean
          example: true
        quantityPurchased:
          type: number
          example: 0
        deleteAllowed:
          type: boolean
          example: true
    ListDetail:
      type: object
      properties:
        _id:
          type: string
          example: "abc123def456"
        name:
          type: string
          example: "Sample List"
        owner:
          type: string
          example: "123abc456def"
        members:
          type: array
          items:
            type: string
            example: "acb123def456"
        creationDate:
          type: string
          example: "2022-04-05T03:43:06.704Z"
        lastUpdateDate:
          type: string
          example: "2022-11-12T00:27:09.201Z"
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemDetail'
    ListCoreOverview:
      type: object
      properties:
        _id:
          type: string
          example: "123abc456def"
        name:
          type: string
          example: "Sample List"
        members:
          type: array
          items:
            type: string
            example: "abc123def456"
        status:
          type: string
          example: "archive"
        creationDate:
          type: string
          example: "2021-10-06T02:32:42.378Z"
        lastUpdateDate:
          type: string
          example: "2021-10-06T02:32:42.378Z"
    ListCreationRequest:
      type: object
      properties:
        listName:
          type: string
          example: "Test List"
    ListOverview:
      type: object
      properties:
        _id:
          type: string
          example: "123abc456def"
        totalItems:
          type: number
          example: 10
        purchasedItems:
          type: number
          example: 2
        listName:
          type: string
          example: "Test List"
        listStatus:
          type: string
          example: "active"
        ownerInfo:
          $ref: '#/components/schemas/OwnerDetails'
        memberDetails:
          type: array
          items:
            $ref: '#/components/schemas/OwnerDetails'

      

          
